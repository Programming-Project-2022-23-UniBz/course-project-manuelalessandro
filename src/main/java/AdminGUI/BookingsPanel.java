/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package AdminGUI;

import Objects.RoomControl;
import Objects.Room;
import Objects.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import org.joda.time.DateTime;

import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import Objects.User.GenderType;
import java.util.Date;
import Objects.Booking;

/**
 *
 * @author kumar
 */
public class BookingsPanel extends javax.swing.JPanel {

        /**
         * Creates new form Bookings
         */
        private Room bookingRoom;
        boolean isCheckInValidated = true;
        boolean isCheckOutValidated = true;
        private boolean isBookingCreated=false;

        /*
         * Two constructors for the BookingsPanel class: first one is used when the
         * BookingsPanel
         * is directly accessed through the side menu (BookingsPanel() is a
         * parameterless constructor).
         * Second constructor is intended to be used when creating a BookingsPanel
         * instance with a selected room.
         */
        public BookingsPanel() {
                initComponents();
                initBookingTable();

        }

        public BookingsPanel(Room selectedRoom) {
                initComponents();
                this.bookingRoom = selectedRoom;
                initBookingRoomTable();
                initBookingTable();
                
        }

        public void setAppControlButtons(javax.swing.JFrame frame, int xBorder) {
                appControlButtons1.setAppControl(frame, appControlButtons1.getX() + xBorder, appControlButtons1.getY());
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        roomsPanel = new javax.swing.JPanel();
        addBookingBtn = new javax.swing.JButton();
        customerNameTxtField = new javax.swing.JTextField();
        titleTxt = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        customerDateOfBirth = new javax.swing.JLabel();
        jDateOfBirthCustomerChooser = new com.toedter.calendar.JDateChooser();
        checkInLabel = new javax.swing.JLabel();
        jDateOfCheckInChooser = new com.toedter.calendar.JDateChooser();
        appControlButtons1 = new DesignObjects.AppControlButtons();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookingRoomDetailsTable = new javax.swing.JTable();
        bookingRoomDetailsLabel = new javax.swing.JLabel();
        customerSurameLabel = new javax.swing.JLabel();
        customerSurameTxtField = new javax.swing.JTextField();
        customerGenderLabel = new javax.swing.JLabel();
        customerGenderComboBox = new javax.swing.JComboBox<>();
        customerEmailLabel = new javax.swing.JLabel();
        customerEmailTxtField = new javax.swing.JTextField();
        checkOutLabel = new javax.swing.JLabel();
        jDateOfCheckOutChooser = new com.toedter.calendar.JDateChooser();
        activeBookingListLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        roomsPanel.setBackground(new java.awt.Color(255, 255, 255));
        roomsPanel.setPreferredSize(new java.awt.Dimension(738, 546));

        addBookingBtn.setBackground(new java.awt.Color(0, 153, 102));
        addBookingBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addBookingBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBookingBtn.setText("ADD NEW BOOKING");
        addBookingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookingBtnActionPerformed(evt);
            }
        });

        customerNameTxtField.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        customerNameTxtField.setForeground(new java.awt.Color(0, 153, 153));

        titleTxt.setBackground(new java.awt.Color(255, 255, 255));
        titleTxt.setFont(new java.awt.Font("Yu Gothic UI", 1, 25)); // NOI18N
        titleTxt.setForeground(new java.awt.Color(102, 153, 255));
        titleTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleTxt.setText("Manage Bookings");

        customerNameLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        customerNameLabel.setForeground(new java.awt.Color(0, 0, 255));
        customerNameLabel.setText("Customer name");

        bookingTable.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Booking ID", "Customer", "Room", "Check-In", "Check-Out", "Total cost â‚¬"
            }
        ));
        bookingTable.setGridColor(new java.awt.Color(51, 153, 255));
        bookingTable.setRowHeight(25);
        bookingTable.setShowGrid(true);
        bookingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookingTable);

        customerDateOfBirth.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        customerDateOfBirth.setForeground(new java.awt.Color(0, 0, 255));
        customerDateOfBirth.setText("Date of Birth");

        checkInLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        checkInLabel.setForeground(new java.awt.Color(0, 0, 255));
        checkInLabel.setText("Date of Check-In");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        bookingRoomDetailsTable.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        bookingRoomDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Room Nr.", "Room Type", "Capacity", "Price", "Availibility"
            }
        ));
        bookingRoomDetailsTable.setGridColor(new java.awt.Color(51, 153, 255));
        bookingRoomDetailsTable.setRowHeight(25);
        bookingRoomDetailsTable.setShowGrid(true);
        bookingRoomDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingRoomDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(bookingRoomDetailsTable);

        bookingRoomDetailsLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        bookingRoomDetailsLabel.setForeground(new java.awt.Color(0, 0, 255));
        bookingRoomDetailsLabel.setText("Booking room details");

        customerSurameLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        customerSurameLabel.setForeground(new java.awt.Color(0, 0, 255));
        customerSurameLabel.setText("Customer surname");

        customerSurameTxtField.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        customerSurameTxtField.setForeground(new java.awt.Color(0, 153, 153));

        customerGenderLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        customerGenderLabel.setForeground(new java.awt.Color(0, 0, 255));
        customerGenderLabel.setText("Gender");

        customerGenderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE", "OTHER" }));
        customerGenderComboBox.setSelectedItem(null);

        customerEmailLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        customerEmailLabel.setForeground(new java.awt.Color(0, 0, 255));
        customerEmailLabel.setText("Customer e-mail");

        customerEmailTxtField.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        customerEmailTxtField.setForeground(new java.awt.Color(0, 153, 153));

        checkOutLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        checkOutLabel.setForeground(new java.awt.Color(0, 0, 255));
        checkOutLabel.setText("Date of Check-Out");

        activeBookingListLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        activeBookingListLabel.setForeground(new java.awt.Color(0, 0, 255));
        activeBookingListLabel.setText("Active booking list");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setText("tap on this table to search for a room.");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel3.setText("(i) Click on a row for more options");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel4.setText("(i) Enter the check-in/check-out dates and then");

        javax.swing.GroupLayout roomsPanelLayout = new javax.swing.GroupLayout(roomsPanel);
        roomsPanel.setLayout(roomsPanelLayout);
        roomsPanelLayout.setHorizontalGroup(
            roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomsPanelLayout.createSequentialGroup()
                .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(titleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(165, 165, 165)
                        .addComponent(appControlButtons1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomsPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(roomsPanelLayout.createSequentialGroup()
                                .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(roomsPanelLayout.createSequentialGroup()
                                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(customerEmailLabel)
                                            .addComponent(customerEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateOfBirthCustomerChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(customerDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(3, 3, 3))
                                    .addGroup(roomsPanelLayout.createSequentialGroup()
                                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(customerSurameLabel)
                                            .addComponent(customerSurameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(customerNameLabel)
                                            .addComponent(customerNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(46, 46, 46)
                                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(customerGenderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(customerGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(79, 79, 79)
                                .addComponent(addBookingBtn))
                            .addGroup(roomsPanelLayout.createSequentialGroup()
                                .addGap(0, 2, Short.MAX_VALUE)
                                .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(activeBookingListLabel)
                                        .addGroup(roomsPanelLayout.createSequentialGroup()
                                            .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(roomsPanelLayout.createSequentialGroup()
                                                    .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jDateOfCheckInChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(checkInLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGap(52, 52, 52)
                                                    .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(checkOutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jDateOfCheckOutChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addComponent(bookingRoomDetailsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2))
                                    .addComponent(jLabel3))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)))
                .addContainerGap())
        );
        roomsPanelLayout.setVerticalGroup(
            roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(appControlButtons1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleTxt))
                .addGap(18, 18, 18)
                .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomsPanelLayout.createSequentialGroup()
                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(roomsPanelLayout.createSequentialGroup()
                                .addComponent(checkOutLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateOfCheckOutChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(roomsPanelLayout.createSequentialGroup()
                                .addComponent(checkInLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateOfCheckInChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(bookingRoomDetailsLabel))
                    .addGroup(roomsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(roomsPanelLayout.createSequentialGroup()
                        .addComponent(customerGenderLabel)
                        .addGap(5, 5, 5)
                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addBookingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(roomsPanelLayout.createSequentialGroup()
                                .addComponent(customerGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(customerDateOfBirth)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateOfBirthCustomerChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(roomsPanelLayout.createSequentialGroup()
                        .addGroup(roomsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roomsPanelLayout.createSequentialGroup()
                                .addComponent(customerSurameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customerSurameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(roomsPanelLayout.createSequentialGroup()
                                .addComponent(customerNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customerNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerEmailLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19)
                .addComponent(activeBookingListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 738, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(roomsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 546, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(roomsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bookingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingTableMouseClicked
     int selectedRow = bookingTable.getSelectedRow();

    if (selectedRow == -1) {
        return;
    }

    // Retrieve the booking ID from the selected row
    String bookingID = (String) bookingTable.getValueAt(selectedRow, 0);

    // Show an option dialog to ask the user for action
    int dialogResult = JOptionPane.showOptionDialog(this,
            "What would you like to do with booking ID " + bookingID + "?",
            "Booking Options", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
            new Object[] { "Modify", "Delete" }, "Modify");

    if (dialogResult == 0) { // Modify option selected
        Booking booking = BookingControl.getBookingById(bookingID);
    } else if (dialogResult == 1) { // Delete option selected
        BookingControl.removeBookingById(bookingID);
        initBookingTable();
    }
    }//GEN-LAST:event_bookingTableMouseClicked

    /*
     * initBookingRoomTable() method initializes the booking room details table
     */
    private void initBookingRoomTable() {

        DefaultTableModel model = (DefaultTableModel) bookingRoomDetailsTable.getModel();
        model.setRowCount(0); // Clear the existing rows

        Object rowData[] = new Object[5];
        rowData[0] = bookingRoom.getId();
        rowData[1] = bookingRoom.getType();
        rowData[2] = bookingRoom.getCapacity();
        rowData[3] = bookingRoom.getPrice();
        if (bookingRoom.isOccupied() == false) {
            rowData[4] = "Yes";
        } else {
            rowData[4] = "No";
        }
        model.addRow(rowData);

        // Make the table content uneditable
        bookingRoomDetailsTable.setDefaultEditor(Object.class, null);
        // Set the updated table model back to the JTable instance
        bookingRoomDetailsTable.setModel(model);
    }

    /*
     * bookingRoomDetailsTableMouseClicked method is an event handler that is
     * triggered when a
     * mouse click event occurs on the booking room details table
     */
    private void bookingRoomDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_bookingRoomDetailsTableMouseClicked
        RoomControl.pullData();
        BookingControl.pullData();

        // Check if any of the required fields are empty
        if (jDateOfCheckInChooser.getDate() == null || jDateOfCheckOutChooser.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Enter the dates first.");
            return;
        }

        Date checkInDate = jDateOfCheckInChooser.getDate();
        Date checkOutDate = jDateOfCheckOutChooser.getDate();

        // Validate check-in date
        Date currentDate = new Date();
        if (checkInDate.before(currentDate) && !isSameDay(checkInDate, currentDate)) {
            JOptionPane.showMessageDialog(this, "Check-in date cannot be earlier than today.",
                    "Invalid Check-in Date",
                    JOptionPane.WARNING_MESSAGE);
            isCheckInValidated = false;
            return;
        }

        // Validate check-out date
        if (checkOutDate.before(checkInDate) && !checkOutDate.equals(checkInDate)) {
            JOptionPane.showMessageDialog(this, "Check-out date cannot be before the check-in date.",
                    "Invalid Check-out Date", JOptionPane.WARNING_MESSAGE);
            isCheckOutValidated = false;
            return;
        }

        // Dates are valid at this point, so reset the validation flags
        isCheckInValidated = true;
        isCheckOutValidated = true;

        if (isCheckInValidated && isCheckOutValidated){
            /*
             * Display an input dialog box using
             * to prompt the user to enter a room ID to search for
             */
            String input = JOptionPane.showInputDialog(this, "Enter a room ID to look for:");

            if (input == null || input.isEmpty()) {
                return; // if the input is null or empty, return from the method.
            }

            int roomId;
            try {
                roomId = Integer.parseInt(input);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid room ID. Please enter a valid number.");
                return;
            }
            // getRoomById method of RoomControl to retrieve the room with the specified ID
            Room room = RoomControl.getRoomById(roomId);

            DateTime dateTimecheckIn = new DateTime(jDateOfCheckInChooser.getDate());
            DateTime dateTimecheckOut = new DateTime(jDateOfCheckOutChooser.getDate());

            if (room == null) {
                JOptionPane.showMessageDialog(this,
                        "No room found with ID " + roomId + ". Please enter a valid room ID.");
            } else if (room.isOccupied(dateTimecheckIn, dateTimecheckOut)) {
                // Check if the selected room is available
                JOptionPane.showMessageDialog(this,
                        "Selected room is not available. Please choose another room.",
                        "Invalid Room Selection", JOptionPane.WARNING_MESSAGE);
            } else {
                bookingRoom = room; // If the room is available, update the bookingRoom variable with the new room
                initBookingRoomTable(); // initBookingRoomTable() to update the booking room details table with the new room's information.
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid dates.",
                    "Invalid Check-out Date", JOptionPane.WARNING_MESSAGE);
            return;
        }

    }// GEN-LAST:event_bookingRoomDetailsTableMouseClicked

    private void addBookingBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addBookingBtnActionPerformed
        boolean isUserCreated = true;

        // Check if any of the required fields are empty
        if (customerNameTxtField.getText().isEmpty()
                || customerSurameTxtField.getText().isEmpty()
                || jDateOfBirthCustomerChooser.getDate() == null
                || jDateOfCheckInChooser.getDate() == null
                || jDateOfCheckOutChooser.getDate() == null
                || customerGenderComboBox.getSelectedItem() == null
                || bookingRoom == null
                || customerEmailTxtField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all the required fields.");
            return;
        }

        User user;
        try {
            /*
             * Call the processUserInputs method to extract and validate the user input
             * fields. This method is responsible for creating a User object based on the
             * input
             * provided by the user.
             */
            user = processUserInputs();
            if(user == null){
                JOptionPane.showMessageDialog(this,
                        "An error occurred while processing user inputs. Please check your input.");
                isUserCreated = false;
                return;
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this,
                    "An error occurred while processing user inputs. Please check your input.");
            isUserCreated = false;
            return;
        }

        if (!isUserCreated || !isCheckInValidated || !isCheckOutValidated) {
            JOptionPane.showMessageDialog(this, "Booking was not created successfully.", "Invalid Booking",
                    JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            if(isUserCreated || isCheckInValidated || isCheckOutValidated){
                Date checkInDate = jDateOfCheckInChooser.getDate();
                Date checkOutDate = jDateOfCheckOutChooser.getDate();

                Booking booking = new Booking(new DateTime(checkInDate), new DateTime(checkOutDate), bookingRoom, user);
                booking.setBookingId();
                BookingControl.pullData();
                BookingControl.addBooking(booking);
                BookingControl.pushData();
                isBookingCreated=true;
                initBookingTable();

                // Display a success message
                JOptionPane.showMessageDialog(this, "Booking added successfully!");
            }
            else{
                JOptionPane.showMessageDialog(this, "Booking was not created successfully.", "Invalid Booking",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }// GEN-LAST:event_addBookingBtnActionPerformed

    private boolean isRoomAvailable(Room room, Date checkInDate, Date checkOutDate) {
        if (BookingControl.getBookings() == null)
            return true;

        for (Booking booking : BookingControl.getBookings()) {
            if (booking.getRoom().equals(room)) {
                // Check if the booking overlaps with the desired check-in and check-out dates
                if (checkInDate.before(booking.getCheckOutDate().toDate())
                        && checkOutDate.after(booking.getCheckInDate().toDate())) {
                    return false; // Room is not available
                }
            }
        }
        return true; // Room is available
    }

    private User processUserInputs() {
        // Extract input from GUI components
        String name = customerNameTxtField.getText();
        String surname = customerSurameTxtField.getText();
        Date dateOfBirth = jDateOfBirthCustomerChooser.getDate();
        String email = customerEmailTxtField.getText();

        boolean nameIsValidated = true;
        boolean surnameIsValidated = true;
        boolean DOBIsValidated = true;
        boolean genderIsValidated = true;
        boolean emailIsValidated = true;

        // Validate name
        if (!name.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid name. Only alphabetic characters are allowed.",
                    "Invalid Name", JOptionPane.WARNING_MESSAGE);
            nameIsValidated = false;
        }

        // Validate surname
        if (!surname.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid surname. Only alphabetic characters are allowed.",
                    "Invalid Surname", JOptionPane.WARNING_MESSAGE);
            surnameIsValidated = false;
        }

        // Validate date of birth
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.YEAR, -18); // Subtract 18 years from the current date
        Date eighteenYearsAgo = calendar.getTime();

        if (dateOfBirth == null || dateOfBirth.toInstant().isAfter(eighteenYearsAgo.toInstant())) {
            JOptionPane.showMessageDialog(this, "Guest must be at least 18 years old.", "Invalid Date of Birth", JOptionPane.WARNING_MESSAGE);
            DOBIsValidated = false;
        } else {
            DOBIsValidated = true;
        }

        // Validate gender
        GenderType gender = getSelectedGender();
        if (gender == null) {
            JOptionPane.showMessageDialog(this, "Please select a gender.", "Missing Information",
                    JOptionPane.WARNING_MESSAGE);
            genderIsValidated = false;
        }

        // Validate email
        if (!isValidEmail(email)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid email address.", "Invalid Email",
                    JOptionPane.WARNING_MESSAGE);
            customerEmailTxtField.setText(""); // Clear the email text field
            emailIsValidated = false;
        }

        // Create the User object with valid input
        if (!nameIsValidated || !surnameIsValidated || !DOBIsValidated || !genderIsValidated
                || !emailIsValidated) {
            return null;
        }

        User user = new User(name, surname, dateOfBirth, gender, email);
        return user;
    }

    private boolean isValidEmail(String email) {
        String emailRegex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";

        // Compile the regex pattern
        Pattern pattern = Pattern.compile(emailRegex);
        // Match the input email to the created pattern
        Matcher matcher = pattern.matcher(email);

        return matcher.matches();
    }

    private GenderType getSelectedGender() {
        String selectedGender = (String) customerGenderComboBox.getSelectedItem();

        if (selectedGender == null) {
            JOptionPane.showMessageDialog(this, "Please select a gender.");
            return null;
        }

        try {
            return GenderType.valueOf(selectedGender.toUpperCase());
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Please select a valid gender.");
            return null;
        }
    }

    private boolean isSameDay(Date date1, Date date2) {
        Calendar cal1 = Calendar.getInstance();
        Calendar cal2 = Calendar.getInstance();
        cal1.setTime(date1);
        cal2.setTime(date2);
        return cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)
                && cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH)
                && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH);
    }

    public void initBookingTable() {

        BookingControl.pullData();

        if(BookingControl.getBookings() != null){
            DefaultTableModel model = (DefaultTableModel) bookingTable.getModel();
            model.setRowCount(0); // Clear existing rows

            for (Booking booking : BookingControl.getBookings()) {

                Object rowData[] = new Object[6];
                rowData[0] = booking.getBookingId();
                rowData[1] = booking.getUser().getFullName();
                rowData[2] = booking.getRoom().getId();
                rowData[3] = booking.getCheckInDate();
                rowData[4] = booking.getCheckOutDate();
                rowData[5] = booking.getTotalCost();
                // Add a row to the table with booking information
                model.addRow(rowData);
            }

            // Make the table content uneditable
            bookingTable.setDefaultEditor(Object.class, null);
            // Set the updated table model back to the JTable instance
            bookingTable.setModel(model);
        }


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeBookingListLabel;
    private javax.swing.JButton addBookingBtn;
    private DesignObjects.AppControlButtons appControlButtons1;
    private javax.swing.JLabel bookingRoomDetailsLabel;
    private javax.swing.JTable bookingRoomDetailsTable;
    private javax.swing.JTable bookingTable;
    private javax.swing.JLabel checkInLabel;
    private javax.swing.JLabel checkOutLabel;
    private javax.swing.JLabel customerDateOfBirth;
    private javax.swing.JLabel customerEmailLabel;
    private javax.swing.JTextField customerEmailTxtField;
    private javax.swing.JComboBox<String> customerGenderComboBox;
    private javax.swing.JLabel customerGenderLabel;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JTextField customerNameTxtField;
    private javax.swing.JLabel customerSurameLabel;
    private javax.swing.JTextField customerSurameTxtField;
    private com.toedter.calendar.JDateChooser jDateOfBirthCustomerChooser;
    private com.toedter.calendar.JDateChooser jDateOfCheckInChooser;
    private com.toedter.calendar.JDateChooser jDateOfCheckOutChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel roomsPanel;
    private javax.swing.JLabel titleTxt;
    // End of variables declaration//GEN-END:variables
}
